From 61c1fc665ee7ce5e68cec184e7bfbc65b3154da3 Mon Sep 17 00:00:00 2001
From: Cleber Rosa <crosa@redhat.com>
Date: Wed, 20 Mar 2019 10:38:38 -0400
Subject: [PATCH 1/4] Test: report test phases

The avocado test runner mostly "flies blind" when it comes to the
individual test phases, that is, it doesn't know if a test is
currently being initialized, running its setup, running the test
method itself or its teardown.

With this, the runner gets access to that information, and can act
differently based on this knowledge.  One use case is to allow for
different timeouts on different test phases.

Signed-off-by: Cleber Rosa <crosa@redhat.com>
---
 avocado/core/test.py                | 17 ++++++++++++++++-
 examples/tests/phases.py            | 24 ++++++++++++++++++++++++
 selftests/functional/test_basic.py  |  8 ++++++++
 selftests/unit/test_runner_queue.py |  1 +
 4 files changed, 49 insertions(+), 1 deletion(-)
 create mode 100755 examples/tests/phases.py

diff --git a/avocado/core/test.py b/avocado/core/test.py
index 5b712a8b3..1c5bc11a8 100644
--- a/avocado/core/test.py
+++ b/avocado/core/test.py
@@ -61,7 +61,7 @@
                          'status', 'running', 'paused',
                          'time_start', 'time_elapsed', 'time_end',
                          'fail_reason', 'fail_class', 'traceback',
-                         'timeout', 'whiteboard')
+                         'timeout', 'whiteboard', 'phase')
 
 
 class RawFileHandler(logging.FileHandler):
@@ -336,6 +336,8 @@ def __init__(self, methodName='test', name=None, params=None,
                             :func:`avocado.data_dir.create_job_logs_dir`.
         :param job: The job that this test is part of.
         """
+        self.__phase = 'INIT'
+
         def record_and_warn(*args, **kwargs):
             """ Record call to this function and log warning """
             if not self.__log_warn_used:
@@ -591,6 +593,15 @@ def fail_class(self):
     def traceback(self):
         return self.__traceback
 
+    @property
+    def phase(self):
+        """
+        The current phase of the test execution
+
+        Possible (string) values are: INIT, SETUP, TEST and TEARDOWN
+        """
+        return self.__phase
+
     def __str__(self):
         return str(self.name)
 
@@ -821,6 +832,7 @@ def _run_avocado(self):
         skip_test = getattr(testMethod, '__skip_test_decorator__', False)
         try:
             if skip_test is False:
+                self.__phase = 'SETUP'
                 self.setUp()
         except exceptions.TestSkipError as details:
             skip_test = True
@@ -835,6 +847,7 @@ def _run_avocado(self):
             raise exceptions.TestSetupFail(details)
         else:
             try:
+                self.__phase = 'TEST'
                 testMethod()
             except exceptions.TestCancel as details:
                 stacktrace.log_exc_info(sys.exc_info(), logger=LOG_JOB)
@@ -852,6 +865,7 @@ def _run_avocado(self):
         finally:
             try:
                 if skip_test is False:
+                    self.__phase = 'TEARDOWN'
                     self.tearDown()
             except exceptions.TestSkipError as details:
                 stacktrace.log_exc_info(sys.exc_info(), logger=LOG_JOB)
@@ -995,6 +1009,7 @@ def run_avocado(self):
             for e_line in tb_info:
                 self.log.error(e_line)
         finally:
+            self.__phase = 'FINISHED'
             self._tag_end()
             self._report()
             self.log.info("")
diff --git a/examples/tests/phases.py b/examples/tests/phases.py
new file mode 100755
index 000000000..2037614d6
--- /dev/null
+++ b/examples/tests/phases.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python
+
+from avocado import main
+from avocado import Test
+
+
+class Phases(Test):
+
+    """
+    Example test for checking the reported test phases
+    """
+
+    def setUp(self):
+        self.assertEqual(self.phase, 'SETUP')
+
+    def test(self):
+        self.assertEqual(self.phase, 'TEST')
+
+    def tearDown(self):
+        self.assertEqual(self.phase, 'TEARDOWN')
+
+
+if __name__ == "__main__":
+    main()
diff --git a/selftests/functional/test_basic.py b/selftests/functional/test_basic.py
index 1f026504c..c26356077 100644
--- a/selftests/functional/test_basic.py
+++ b/selftests/functional/test_basic.py
@@ -196,6 +196,14 @@ def test_alternate_config_datadir(self):
         self.assertIn('    data     ' + mapping['data_dir'], result.stdout_text)
         self.assertIn('    logs     ' + mapping['logs_dir'], result.stdout_text)
 
+    def test_runner_phases(self):
+        cmd_line = ('%s run --sysinfo=off --job-results-dir %s '
+                    'phases.py' % (AVOCADO, self.tmpdir))
+        result = process.run(cmd_line)
+        expected_rc = exit_codes.AVOCADO_ALL_OK
+        self.assertEqual(result.exit_status, expected_rc,
+                         "Avocado did not return rc %d:\n%s" % (expected_rc, result))
+
     def test_runner_all_ok(self):
         cmd_line = ('%s run --sysinfo=off --job-results-dir %s '
                     'passtest.py passtest.py' % (AVOCADO, self.tmpdir))
diff --git a/selftests/unit/test_runner_queue.py b/selftests/unit/test_runner_queue.py
index 6bf5f01c5..79b592627 100644
--- a/selftests/unit/test_runner_queue.py
+++ b/selftests/unit/test_runner_queue.py
@@ -61,6 +61,7 @@ def test_whiteboard(self):
         msg = self._run_test(factory)
 
         self.assertEqual(msg['whiteboard'], 'TXkgbWVzc2FnZSBlbmNvZGVkIGluIGJhc2U2NA==\n')
+        self.assertIn('phase', msg)
 
     def tearDown(self):
         shutil.rmtree(self.tmpdir)

From c408821b62d31ce9dd87aa437b79001d77207bb5 Mon Sep 17 00:00:00 2001
From: Cleber Rosa <crosa@redhat.com>
Date: Wed, 20 Mar 2019 11:39:27 -0400
Subject: [PATCH 2/4] Test: report state on each phase

The test can be asked to report its state, or it can do it itself.
Given that the test knows when it enters each phase, let's ask it to
report it.

Because the *state* is now reported, it's possible for a test to
finish (for instance by killing itself) without setting a valid (user
visible) status, such as "PASS", "FAIL", etc.

Signed-off-by: Cleber Rosa <crosa@redhat.com>
---
 avocado/core/test.py               | 3 +++
 selftests/functional/test_basic.py | 4 +++-
 2 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/avocado/core/test.py b/avocado/core/test.py
index 1c5bc11a8..3e3bf6968 100644
--- a/avocado/core/test.py
+++ b/avocado/core/test.py
@@ -833,6 +833,7 @@ def _run_avocado(self):
         try:
             if skip_test is False:
                 self.__phase = 'SETUP'
+                self.report_state()
                 self.setUp()
         except exceptions.TestSkipError as details:
             skip_test = True
@@ -848,6 +849,7 @@ def _run_avocado(self):
         else:
             try:
                 self.__phase = 'TEST'
+                self.report_state()
                 testMethod()
             except exceptions.TestCancel as details:
                 stacktrace.log_exc_info(sys.exc_info(), logger=LOG_JOB)
@@ -866,6 +868,7 @@ def _run_avocado(self):
             try:
                 if skip_test is False:
                     self.__phase = 'TEARDOWN'
+                    self.report_state()
                     self.tearDown()
             except exceptions.TestSkipError as details:
                 stacktrace.log_exc_info(sys.exc_info(), logger=LOG_JOB)
diff --git a/selftests/functional/test_basic.py b/selftests/functional/test_basic.py
index c26356077..53cdace6b 100644
--- a/selftests/functional/test_basic.py
+++ b/selftests/functional/test_basic.py
@@ -315,7 +315,9 @@ def test_no_status_reported(self):
             self.assertEqual(results["tests"][0]["status"], "ERROR",
                              "%s != %s\n%s" % (results["tests"][0]["status"],
                                                "ERROR", res))
-            self.assertIn("Test died without reporting the status",
+            self.assertIn("Test reports unsupported test status",
+                          results["tests"][0]["fail_reason"])
+            self.assertIn("status: None",
                           results["tests"][0]["fail_reason"])
 
     def test_runner_tests_fail(self):

From 6b3bf01b4efb6d64616d4d5e1ede4cc29c89ba10 Mon Sep 17 00:00:00 2001
From: Cleber Rosa <crosa@redhat.com>
Date: Wed, 20 Mar 2019 12:26:58 -0400
Subject: [PATCH 3/4] Runner: cosmetic only changes

Signed-off-by: Cleber Rosa <crosa@redhat.com>
---
 avocado/core/runner.py | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/avocado/core/runner.py b/avocado/core/runner.py
index 63cda583c..1fc84844b 100644
--- a/avocado/core/runner.py
+++ b/avocado/core/runner.py
@@ -216,14 +216,12 @@ def finish(self, proc, started, step, deadline, result_dispatcher):
                notifications)
         """
         # Wait for either process termination or test status
-        wait.wait_for(lambda: not proc.is_alive() or self.status, 1, 0,
-                      step)
+        wait.wait_for(lambda: not proc.is_alive() or self.status, 1, 0, step)
         if self.status:     # status exists, wait for process to finish
             deadline = min(deadline, time.time() + TIMEOUT_PROCESS_ALIVE)
             while time.time() < deadline:
                 result_dispatcher.map_method('test_progress', False)
-                if wait.wait_for(lambda: not proc.is_alive(), 1, 0,
-                                 step):
+                if wait.wait_for(lambda: not proc.is_alive(), 1, 0, step):
                     return self._add_status_failures(self.status)
             err = "Test reported status but did not finish"
         else:   # proc finished, wait for late status delivery

From d9e5210cd6112b59f7caff98883a9748495c07dd Mon Sep 17 00:00:00 2001
From: Cleber Rosa <crosa@redhat.com>
Date: Wed, 20 Mar 2019 12:46:57 -0400
Subject: [PATCH 4/4] [RFC] Runner: add extra timeout for tests in teardown

The current time given to tests performing teardown is pretty limited.
Let's add a 60 seconds fixed timeout just for validating the idea, and
once settled, we can turn that into a configuration setting.

Signed-off-by: Cleber Rosa <crosa@redhat.com>
---
 avocado/core/runner.py             | 11 +++++++++--
 examples/tests/longteardown.py     | 29 +++++++++++++++++++++++++++++
 selftests/functional/test_basic.py | 18 ++++++++++++++++++
 3 files changed, 56 insertions(+), 2 deletions(-)
 create mode 100644 examples/tests/longteardown.py

diff --git a/avocado/core/runner.py b/avocado/core/runner.py
index 1fc84844b..17e6215d0 100644
--- a/avocado/core/runner.py
+++ b/avocado/core/runner.py
@@ -45,6 +45,8 @@
 TIMEOUT_PROCESS_DIED = 10
 #: when test reported status but the process did not finish
 TIMEOUT_PROCESS_ALIVE = 60
+#: extra timeout to give to a test in TEARDOWN phase
+TIMEOUT_TEARDOWN = 60
 
 
 def add_runner_failure(test_state, new_status, message):
@@ -219,7 +221,7 @@ def finish(self, proc, started, step, deadline, result_dispatcher):
         wait.wait_for(lambda: not proc.is_alive() or self.status, 1, 0, step)
         if self.status:     # status exists, wait for process to finish
             deadline = min(deadline, time.time() + TIMEOUT_PROCESS_ALIVE)
-            while time.time() < deadline:
+            while time.time() < deadline + TIMEOUT_TEARDOWN:
                 result_dispatcher.map_method('test_progress', False)
                 if wait.wait_for(lambda: not proc.is_alive(), 1, 0, step):
                     return self._add_status_failures(self.status)
@@ -422,7 +424,12 @@ def sigtstp_handler(signum, frame):     # pylint: disable=W0613
 
         while True:
             try:
-                if time.time() >= deadline:
+                now = time.time()
+                if test_status.status.get('phase') == 'TEARDOWN':
+                    reached = now >= deadline + TIMEOUT_TEARDOWN
+                else:
+                    reached = now >= deadline
+                if reached:
                     abort_reason = "Timeout reached"
                     try:
                         os.kill(proc.pid, signal.SIGTERM)
diff --git a/examples/tests/longteardown.py b/examples/tests/longteardown.py
new file mode 100644
index 000000000..5509fbb61
--- /dev/null
+++ b/examples/tests/longteardown.py
@@ -0,0 +1,29 @@
+#!/usr/bin/env python
+
+import time
+
+from avocado import main
+from avocado import Test
+
+
+class LongTearDown(Test):
+
+    """
+    Example test with a longer than usual tearDown()
+    """
+
+    timeout = 1.0
+
+    def test(self):
+        """
+        Should be interrupted because of sleep longer than test timeout
+        """
+        time.sleep(2)
+
+    def tearDown(self):
+        time.sleep(2)
+        self.whiteboard = 'TEARDOWN PERFORMED'
+
+
+if __name__ == "__main__":
+    main()
diff --git a/selftests/functional/test_basic.py b/selftests/functional/test_basic.py
index 53cdace6b..cf8c717ef 100644
--- a/selftests/functional/test_basic.py
+++ b/selftests/functional/test_basic.py
@@ -204,6 +204,24 @@ def test_runner_phases(self):
         self.assertEqual(result.exit_status, expected_rc,
                          "Avocado did not return rc %d:\n%s" % (expected_rc, result))
 
+    @unittest.skipIf(int(os.environ.get("AVOCADO_CHECK_LEVEL", 0)) < 1,
+                     "Skipping test that take a long time to run, are "
+                     "resource intensive or time sensitve")
+    def test_runner_teardown_timeout(self):
+        cmd_line = ('%s run --sysinfo=off --job-results-dir %s '
+                    '--json - -- longteardown.py' % (AVOCADO, self.tmpdir))
+        result = process.run(cmd_line, ignore_status=True)
+        expected_rc = exit_codes.AVOCADO_JOB_INTERRUPTED
+        self.assertEqual(result.exit_status, expected_rc,
+                         "Avocado did not return rc %d:\n%s" % (expected_rc, result))
+        results = json.loads(result.stdout_text)
+        self.assertEqual(results["tests"][0]["status"], "INTERRUPTED")
+        self.assertEqual(results["tests"][0]["whiteboard"], "TEARDOWN PERFORMED")
+        # Test running time should be at least the test timeout (1.0)
+        # plus the amount of time taken on tearDown (2), but no longer
+        # then the teardown timeout itself.
+        self.assertGreaterEqual(results["tests"][0]["time"], 3)
+
     def test_runner_all_ok(self):
         cmd_line = ('%s run --sysinfo=off --job-results-dir %s '
                     'passtest.py passtest.py' % (AVOCADO, self.tmpdir))
